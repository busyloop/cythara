crystal_doc_search_index_callback({"repository_name":"cythara","body":"# Cythara\n\n[![CI](https://github.com/busyloop/cythara/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/busyloop/cythara/actions/workflows/ci.yml?query=branch%3Amaster) [![GitHub](https://img.shields.io/github/license/busyloop/cythara)](https://en.wikipedia.org/wiki/MIT_License) [![GitHub release](https://img.shields.io/github/release/busyloop/cythara.svg)](https://github.com/busyloop/cythara/releases)\n\nA small collection of String helpers.  \n\n\n\n## Features\n\n##### Text formatting\n\n* `linewrap` - Wrap a String at a given width\n* `wordwrap` - Wrap a String to a given width at word boundaries\n\n##### ANSI\n\n* `contains_ansi?` - Detect ANSI escape codes\n* `strip_ansi` - Strip ANSI escape codes\n\n\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     cythara:\n       github: busyloop/cythara\n   ```\n\n2. Run `shards install`\n\n\n\n## API\n\n* 📚 [API Documentation](https://busyloop.github.io/cythara/Cythara.html)\n\n<img src=\"./assets/pointer.png\" width=\"200\" align=\"left\" /><br clear=\"left\" />\n\n## Usage\n\n```crystal\nrequire \"cythara/wrap\"\nCythara.wordwrap(\"The quick brown fox\", 12) # => [\"The quick\", \"brown fox\"]\nCythara.linewrap(\"The quick brown fox\", 12) # => [\"The quick br\", \"own fox\"]\n\nrequire \"cythara/ansi\"\nCythara.contains_ansi?(\"\\e[31;1mRed Fox\") # => true\nCythara.strip_ansi(\"\\e[31;1mRed Fox\")     # => \"Red Fox\"\n```\n\n\n\n## Usage for lazy monkeys 🐒\n\n```crystal\nrequire \"cythara/string\"\n\n\"The quick brown fox\".wordwrap(12) # => [\"The quick\", \"brown fox\"]\n\"The quick brown fox\".linewrap(12) # => [\"The quick br\", \"own fox\"]\n\n\"\\e[31;1mRed Fox\".contains_ansi? # => true\n\"\\e[31;1mRed Fox\".strip_ansi     # => \"Red Fox\"\n```\n\n\n## Credits\n\nThe `strip_ansi` and `contains_ansi?` methods were ported\nfrom the [strings-ansi](https://github.com/piotrmurach/strings-ansi) Ruby gem by Piotr Murach.\n\n\n\n## Contributing\n\n1. Fork it (<https://github.com/busyloop/cythara/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n","program":{"html_id":"cythara/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cythara","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cythara/Cythara","path":"Cythara.html","kind":"module","full_name":"Cythara","name":"Cythara","abstract":false,"locations":[{"filename":"src/cythara/ansi.cr","line_number":1,"url":null},{"filename":"src/cythara/version.cr","line_number":2,"url":null},{"filename":"src/cythara/wrap.cr","line_number":3,"url":null}],"repository_name":"cythara","program":false,"enum":false,"alias":false,"const":false,"doc":"A small collection of String helpers","summary":"<p>A small collection of String helpers</p>","class_methods":[{"html_id":"contains_ansi?(string):Bool-class-method","name":"contains_ansi?","doc":"Returns _true_ if `string` contains ANSI escape codes.","summary":"<p>Returns <em>true</em> if <code>string</code> contains ANSI escape codes.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":""}],"args_string":"(string) : Bool","args_html":"(string) : Bool","location":{"filename":"src/cythara/ansi.cr","line_number":15,"url":null},"def":{"name":"contains_ansi?","args":[{"name":"string","external_name":"string","restriction":""}],"return_type":"Bool","visibility":"Public","body":"!(!(string =~ ANSI_REGEX))"}},{"html_id":"linewrap(string:String,width:Int32,strip_leading_space=true):Array(String)-class-method","name":"linewrap","doc":"Returns a line-wrapped representation of `string`.\n\n**Examples:**\n```\nCythara.linewrap(\"The quick brown fox\", 6)        => [\"The qu\", \"ick br\", \"own fo\", \"x\"]\nCythara.linewrap(\"The quick brown fox\", 15)       => [\"The quick brown\", \"fox\"]\nCythara.linewrap(\"The quick brown fox\", 15, false) => [\"The quick brown\", \" fox\"]\n```","summary":"<p>Returns a line-wrapped representation of <code>string</code>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"strip_leading_space","default_value":"true","external_name":"strip_leading_space","restriction":""}],"args_string":"(string : String, width : Int32, strip_leading_space = true) : Array(String)","args_html":"(string : <a href=\"String.html\">String</a>, width : Int32, strip_leading_space = <span class=\"n\">true</span>) : Array(<a href=\"String.html\">String</a>)","location":{"filename":"src/cythara/wrap.cr","line_number":75,"url":null},"def":{"name":"linewrap","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"strip_leading_space","default_value":"true","external_name":"strip_leading_space","restriction":""}],"return_type":"Array(String)","visibility":"Public","body":"if width < 1\n  raise(ArgumentError.new(\"width must be > 0\"))\nend\nlines = [] of String\ns = String::Builder.new(width)\nx = 0\nstring.each_char do |char|\n  if char == '\\n'\n    char = ' '\n  end\n  if (strip_leading_space && (x == 0)) && (char == ' ')\n    next\n  end\n  s << char\n  x = x + 1\n  if x == width\n    lines << s.to_s\n    s = String::Builder.new(width)\n    x = 0\n  end\nend\nif x > 0\n  lines << s.to_s\nend\nlines[-1] = lines[-1].rstrip\nlines\n"}},{"html_id":"strip_ansi(string):String-class-method","name":"strip_ansi","doc":"Returns `string` with all ANSI escape codes removed.","summary":"<p>Returns <code>string</code> with all ANSI escape codes removed.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":""}],"args_string":"(string) : String","args_html":"(string) : <a href=\"String.html\">String</a>","location":{"filename":"src/cythara/ansi.cr","line_number":10,"url":null},"def":{"name":"strip_ansi","args":[{"name":"string","external_name":"string","restriction":""}],"return_type":"String","visibility":"Public","body":"string.gsub(ANSI_REGEX, \"\")"}},{"html_id":"wordwrap(string:String,width:Int32,separators=['','\\n'],breakers=['-']):Array(String)-class-method","name":"wordwrap","doc":"Returns a word-wrapped representation of `string`.\n\n**Example:**\n```\nCythara.wordwrap(\"The quick brown fox\", 11) => [\"The quick\", \"brown fox\"]\n```","summary":"<p>Returns a word-wrapped representation of <code>string</code>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"separators","default_value":"[' ', '\\n']","external_name":"separators","restriction":""},{"name":"breakers","default_value":"['-']","external_name":"breakers","restriction":""}],"args_string":"(string : String, width : Int32, separators = [' ', '\\n'], breakers = ['-']) : Array(String)","args_html":"(string : <a href=\"String.html\">String</a>, width : Int32, separators = [<span class=\"s\">&#39; &#39;</span>, <span class=\"s\">&#39;\\n&#39;</span>], breakers = [<span class=\"s\">&#39;-&#39;</span>]) : Array(<a href=\"String.html\">String</a>)","location":{"filename":"src/cythara/wrap.cr","line_number":14,"url":null},"def":{"name":"wordwrap","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"separators","default_value":"[' ', '\\n']","external_name":"separators","restriction":""},{"name":"breakers","default_value":"['-']","external_name":"breakers","restriction":""}],"return_type":"Array(String)","visibility":"Public","body":"if width < 1\n  raise(ArgumentError.new(\"width must be > 0\"))\nend\nlines = [] of String\nline = String::Builder.new(width)\ntokens = Deque(String).new\ntoken = String::Builder.new(BUF_SIZE)\nstring.each_char do |char|\n  if separators.includes?(char)\n    if token.empty?\n    else\n      tokens << token.to_s\n    end\n    token = String::Builder.new(BUF_SIZE)\n    next\n  end\n  token << char\n  if breakers.includes?(char)\n    if token.empty?\n    else\n      tokens << token.to_s\n    end\n    token = String::Builder.new(BUF_SIZE)\n  end\nend\nif token.empty?\nelse\n  tokens << token.to_s\nend\nx = 0\nlast_char = nil\nwhile token = tokens.shift?\n  if (x + token.size) > width\n    if x == 0\n      lines << token[0..(width - 1)]\n      tokens.unshift(token[width..-1])\n      line = String::Builder.new(width)\n      x = 0\n    else\n      (x + token.size) > (width - 1)\n      tokens.unshift(token)\n      lines << line.to_s\n      line = String::Builder.new(width)\n      x = 0\n    end\n  else\n    if (x == 0) || (breakers.includes?(last_char))\n    else\n      line << \" \"\n    end\n    line << token\n    last_char = token[-1]\n    x = x + (token.size + 1)\n  end\nend\nif line.empty?\nelse\n  lines << line.to_s\nend\nlines\n"}}]},{"html_id":"cythara/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"cythara/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cythara/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cythara/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cythara/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cythara/string.cr","line_number":7,"url":null}],"repository_name":"cythara","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cythara/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"If you `require \"cythara/string\"` then the\nfollowing helper-methods become available\non all your `String`-instances.","summary":"<p>If you <code>require &quot;cythara/string&quot;</code> then the following helper-methods become available on all your <code><a href=\"String.html\">String</a></code>-instances.</p>","instance_methods":[{"html_id":"contains_ansi?-instance-method","name":"contains_ansi?","doc":"See `Cythara.contains_ansi?`","summary":"<p>See <code><a href=\"Cythara.html#contains_ansi%3F%28string%29%3ABool-class-method\">Cythara.contains_ansi?</a></code></p>","abstract":false,"location":{"filename":"src/cythara/string.cr","line_number":24,"url":null},"def":{"name":"contains_ansi?","visibility":"Public","body":"Cythara.contains_ansi?(self)"}},{"html_id":"linewrap(width:Int32,strip_leading_space=true)-instance-method","name":"linewrap","doc":"See `Cythara.linewrap`","summary":"<p>See <code><a href=\"Cythara.html#linewrap%28string%3AString%2Cwidth%3AInt32%2Cstrip_leading_space%3Dtrue%29%3AArray%28String%29-class-method\">Cythara.linewrap</a></code></p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"strip_leading_space","default_value":"true","external_name":"strip_leading_space","restriction":""}],"args_string":"(width : Int32, strip_leading_space = true)","args_html":"(width : Int32, strip_leading_space = <span class=\"n\">true</span>)","location":{"filename":"src/cythara/string.cr","line_number":14,"url":null},"def":{"name":"linewrap","args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"strip_leading_space","default_value":"true","external_name":"strip_leading_space","restriction":""}],"visibility":"Public","body":"Cythara.linewrap(self, width, strip_leading_space)"}},{"html_id":"strip_ansi-instance-method","name":"strip_ansi","doc":"See `Cythara.strip_ansi`","summary":"<p>See <code><a href=\"Cythara.html#strip_ansi%28string%29%3AString-class-method\">Cythara.strip_ansi</a></code></p>","abstract":false,"location":{"filename":"src/cythara/string.cr","line_number":19,"url":null},"def":{"name":"strip_ansi","visibility":"Public","body":"Cythara.strip_ansi(self)"}},{"html_id":"wordwrap(width:Int32,separator=['','\\n'],breakers=['-'])-instance-method","name":"wordwrap","doc":"See `Cythara.wordwrap`","summary":"<p>See <code><a href=\"Cythara.html#wordwrap%28string%3AString%2Cwidth%3AInt32%2Cseparators%3D%5B%27%27%2C%27%5Cn%27%5D%2Cbreakers%3D%5B%27-%27%5D%29%3AArray%28String%29-class-method\">Cythara.wordwrap</a></code></p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"separator","default_value":"[' ', '\\n']","external_name":"separator","restriction":""},{"name":"breakers","default_value":"['-']","external_name":"breakers","restriction":""}],"args_string":"(width : Int32, separator = [' ', '\\n'], breakers = ['-'])","args_html":"(width : Int32, separator = [<span class=\"s\">&#39; &#39;</span>, <span class=\"s\">&#39;\\n&#39;</span>], breakers = [<span class=\"s\">&#39;-&#39;</span>])","location":{"filename":"src/cythara/string.cr","line_number":9,"url":null},"def":{"name":"wordwrap","args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"separator","default_value":"[' ', '\\n']","external_name":"separator","restriction":""},{"name":"breakers","default_value":"['-']","external_name":"breakers","restriction":""}],"visibility":"Public","body":"Cythara.wordwrap(self, width, separator, breakers)"}}]}]}})